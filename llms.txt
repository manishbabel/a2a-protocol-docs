# Guides - [A2A Protocol Documentation](https://manishbabel.github.io/a2a-protocol-docs/): This page provides an overview of the A2A Protocol project, including its logo and essential information for building interoperable AI agents. It also includes a reference to the comprehensive documentation for detailed information about the protocol. The content is designed to be developer-friendly and visually appealing with modern design principles. - [A2A Protocol Quickstart Guide](https://manishbabel.github.io/a2a-protocol-docs/tutorials/python-quickstart/): This quickstart guide provides step-by-step instructions for setting up and using the A2A Protocol to create agentic systems that can communicate with each other. It covers prerequisites, installation, agent creation, configuration of communication protocols, and advanced features like streaming and error handling. Ideal for developers looking to leverage A2A Protocol for building interoperable AI agents. - [Getting Started with A2A Protocol: Building Interoperable AI Agents](https://manishbabel.github.io/a2a-protocol-docs/docs/what-is-a2a/): This page provides an overview of the A2A Protocol, an open standard designed for developers to create interoperable AI agents. It highlights key features such as universal interoperability, security by design, and decentralized architecture, and offers a series of tutorials to help users build multi-agent systems with various capabilities. By following the tutorials, developers will learn to implement essential functionalities like agent discovery and task delegation. - [Building Your First A2A Agent](https://manishbabel.github.io/a2a-protocol-docs/tutorials/python-quickstart/): This tutorial guides you through the process of creating your first A2A-compliant agent using Python. It covers prerequisites, installation of necessary packages, and step-by-step instructions to set up a basic agent with capabilities. By the end of the tutorial, you will have a functional agent that can communicate with other agents using the A2A Protocol. - [Implementing Agent Discovery in A2A](https://manishbabel.github.io/a2a-protocol-docs/docs/agent-discovery/): This tutorial guides you through the process of implementing agent discovery mechanisms in the A2A Protocol. It covers prerequisites, configuration, and the implementation of service discovery within A2A-based systems. By the end, you'll have a functional system that can automatically discover and connect to available agents. - [Adding Memory and State Management to A2A Agents](https://manishbabel.github.io/a2a-protocol-docs/docs/core-concepts/): This page provides a comprehensive guide on how to add memory functionality to A2A agents using persistent state management features. It details the steps to create state management systems, configure agents, and interact with the system to maintain context across multiple interactions. Additionally, it explains how to inspect the state of agents and highlights the advantages of proper state management over simple memory solutions. - [Implementing Human-in-the-Loop Controls in A2A](https://manishbabel.github.io/a2a-protocol-docs/docs/enterprise-features/): This page provides a comprehensive guide on adding human-in-the-loop controls to A2A workflows, enabling agents to pause execution for human input. It details the use of interrupt mechanisms to facilitate user feedback and outlines the steps to integrate human assistance into agent workflows. Additionally, the tutorial covers agent compilation, visualization, and resuming execution with human input. - [Customizing Agent Capabilities in A2A](https://manishbabel.github.io/a2a-protocol-docs/docs/core-concepts/): This tutorial guides you through the process of adding custom capabilities to agents in A2A, enabling complex behaviors in your multi-agent systems without relying solely on basic communication. You will learn how to implement custom task types and capabilities to enhance your agents' functionality. By the end of this tutorial, you will have a deeper understanding of capability management and how to enhance your agents' capabilities. - [Implementing Streaming in A2A Agents](https://manishbabel.github.io/a2a-protocol-docs/docs/streaming-async/): This page provides a comprehensive guide on utilizing the streaming functionality in A2A to enhance agent interactions. It covers how to implement real-time communication, handle streaming responses, and manage asynchronous operations in agent workflows, allowing users to build responsive and efficient multi-agent systems. Additionally, it includes code snippets and practical examples to help developers implement these features effectively. - [A2A Protocol Deployment Options](https://manishbabel.github.io/a2a-protocol-docs/docs/enterprise-features/): This page outlines the various options available for deploying A2A Protocol applications, including local testing and different cloud-based solutions. It details free deployment methods such as Local, as well as production options like Cloud SaaS and self-hosted solutions. Each deployment method is linked to further documentation for in-depth guidance. - [Agent Development with A2A Protocol](https://manishbabel.github.io/a2a-protocol-docs/docs/core-concepts/): This page provides an overview of agent development using the A2A Protocol, highlighting its standardized communication patterns and capabilities for building agent-based applications. It explains the structure of an agent, key features such as capability matching and task delegation, and outlines the SDK ecosystem available for developers. With A2A Protocol, users can focus on application logic while leveraging robust infrastructure for agent communication and coordination. - [Guide to Running Agents in A2A](https://manishbabel.github.io/a2a-protocol-docs/tutorials/python-quickstart/): This page provides a comprehensive overview of how to execute agents in A2A Protocol, detailing both synchronous and asynchronous methods. It covers input and output formats, streaming capabilities, and how to manage execution limits to prevent infinite loops. Additionally, it includes code examples and links to further resources for deeper understanding. - [Streaming Data in A2A Protocol](https://manishbabel.github.io/a2a-protocol-docs/docs/streaming-async/): This page provides an overview of streaming data types in A2A Protocol, including agent progress, task updates, and custom streaming responses. It includes code examples for both synchronous and asynchronous streaming methods. Additionally, it covers how to stream multiple modes and disable streaming when necessary. - [Configuring Communication Models for A2A Agents](https://manishbabel.github.io/a2a-protocol-docs/docs/core-concepts/): This page provides detailed instructions on how to configure various communication models for use with agents in A2A Protocol. It covers model initialization, protocol support, and how to specify models from different providers such as HTTP, WebSocket, and gRPC. Additionally, it includes information on disabling streaming, adding model fallbacks, and links to further resources. - [Using Tools in A2A Protocol](https://manishbabel.github.io/a2a-protocol-docs/docs/core-concepts/): This page provides an overview of how to define, customize, and manage tools within the A2A Protocol framework. It covers creating simple tools, handling tool errors, and utilizing prebuilt integrations for enhanced functionality. Additionally, it discusses advanced features such as capability management and controlling tool behavior during agent execution. - [Integrating MCP with A2A Agents](https://manishbabel.github.io/a2a-protocol-docs/docs/a2a-and-mcp/): This page provides a comprehensive guide on how to integrate the Model Context Protocol (MCP) with A2A agents using the a2a-mcp-adapters library. It includes installation instructions, example code for using MCP tools, and guidance on creating custom MCP servers. Additional resources for further reading on MCP are also provided. - [Understanding Context in A2A Agents](https://manishbabel.github.io/a2a-protocol-docs/docs/core-concepts/): This page provides an overview of how to supply context to agents in A2A Protocol, detailing the three primary types: Task Context, Agent Context, and System Context. It explains how to use these context types to enhance agent behavior, customize communication, and access context in tools. Additionally, it includes code examples for implementing context in various scenarios. - [Understanding Memory in A2A for Conversational Agents](https://manishbabel.github.io/a2a-protocol-docs/docs/core-concepts/): This documentation page provides an overview of the two types of memory supported by A2A Protocol: short-term and long-term memory. It explains how to implement these memory types in conversational agents, including code examples and best practices for managing conversation history. Additionally, it covers the use of persistent storage and tools for enhancing memory functionality. - [Implementing Human-in-the-Loop in A2A](https://manishbabel.github.io/a2a-protocol-docs/docs/enterprise-features/): This documentation page provides a comprehensive guide on how to implement Human-in-the-Loop (HIL) features in A2A Protocol, allowing for human review and approval of agent actions. It covers the use of interrupt mechanisms to pause execution for human input, along with practical examples and code snippets. Additionally, it explains how to create a wrapper to add HIL capabilities to any agent seamlessly. - [Building Multi-Agent Systems](https://manishbabel.github.io/a2a-protocol-docs/docs/core-concepts/): This page provides an overview of multi-agent systems, detailing how to create and manage them using supervisor and swarm architectures. It includes practical examples of implementing a complex multi-agent system using the A2A Protocol libraries. Additionally, the page explains the concept of task delegation between agents, allowing for seamless communication and coordination. - [Implementing Task Delegation in A2A](https://manishbabel.github.io/a2a-protocol-docs/docs/life-of-a-task/): This tutorial guides you through extending an agent to enable task delegation by implementing proper task management and communication protocols. You'll learn how to add task delegation handlers to ensure agents can effectively distribute work and coordinate with each other. Additionally, the tutorial covers scoped task handlers for more granular control over task execution. - [Integrating Authentication with A2A Protocol](https://manishbabel.github.io/a2a-protocol-docs/docs/enterprise-features/): This tutorial guides you through replacing basic communication with secure authentication using OAuth2 for secure agent communication in your A2A Protocol application. You'll learn how to set up authentication providers, implement token validation, and ensure proper agent authorization. By the end, you'll have a production-ready authentication system that allows agents to securely communicate with each other. - [Rebuilding Agent Networks at Runtime in A2A](https://manishbabel.github.io/a2a-protocol-docs/docs/enterprise-features/): This guide explains how to rebuild your agent network at runtime with different configurations in A2A Protocol. It covers the necessary prerequisites, how to define agent networks, and the steps to modify your network-making function for dynamic behavior based on system requirements. Additionally, it provides examples of both static and dynamic network configurations. - [Interacting with Remote Agents in A2A](https://manishbabel.github.io/a2a-protocol-docs/docs/agent-discovery/): This documentation page provides a comprehensive guide on how to interact with remote A2A agents using the RemoteAgent interface. It covers the initialization of RemoteAgent, invoking agents both asynchronously and synchronously, and utilizing them as part of a larger system. Additionally, it includes code examples in Python and JavaScript to facilitate understanding and implementation. - [Deploying Agents on A2A Platform](https://manishbabel.github.io/a2a-protocol-docs/docs/enterprise-features/): This page provides a comprehensive guide on how to deploy agents using the A2A Protocol Platform. It covers the necessary setup, agent definition, and wrapping the agent in an A2A-compliant interface for deployment. Additionally, it highlights the benefits of using A2A Protocol for scalable infrastructure and communication support. - [Integrating A2A with React: A Comprehensive Guide](https://manishbabel.github.io/a2a-protocol-docs/tutorials/javascript-tutorial/): This documentation provides a detailed guide on how to integrate the A2A Protocol platform into your React applications using custom hooks. It covers installation, key features, example implementations, and customization options for building chat experiences with A2A agents. Additionally, it includes advanced topics such as event handling, TypeScript support, and managing conversation threads. - [Implementing Generative User Interfaces with A2A](https://manishbabel.github.io/a2a-protocol-docs/tutorials/javascript-tutorial/): This documentation provides a comprehensive guide on how to implement Generative User Interfaces (Generative UI) using the A2A Protocol platform. It covers prerequisites, step-by-step tutorials for defining UI components, sending them through agent networks, and handling them in React applications. Additionally, it includes how-to guides for customizing components and managing UI state effectively. # Resources - [A2A Protocol FAQ](https://manishbabel.github.io/a2a-protocol-docs/faq/): This FAQ page provides answers to common questions about A2A Protocol, an open standard for AI agent communication and collaboration. It covers topics such as the differences between A2A and other protocols, performance impacts, open-source status, and compatibility with various agent frameworks. Additionally, it outlines the distinctions between A2A Protocol and A2A Platform, including features and deployment options. - [Getting Started with A2A Templates](https://manishbabel.github.io/a2a-protocol-docs/tutorials/): This page provides an overview of open source reference applications known as templates, designed to help users quickly build applications with A2A Protocol. It includes installation instructions for the A2A CLI, a list of available templates with their descriptions, and guidance on creating and deploying a new A2A app. Users can find links to repositories for each template and next steps for customizing their applications. - [Guide to Using llms.txt for A2A Protocol](https://manishbabel.github.io/a2a-protocol-docs/llms.txt): This page provides an overview of the llms.txt format, which facilitates access to programming documentation for large language models (LLMs) and agents working with the A2A Protocol. It outlines the format structure, usage instructions via an MCP server, and best practices for integrating these files into integrated development environments (IDEs). Additionally, it highlights considerations for managing large documentation files effectively. - [Community Agents for A2A Protocol](https://manishbabel.github.io/a2a-protocol-docs/community/): This page provides a list of community-built libraries that extend the functionality of A2A Protocol. Each entry includes the library name, GitHub URL, a brief description, and additional metrics like weekly downloads and stars. Additionally, it outlines how to contribute your own library to the A2A Protocol documentation. - [A2A Protocol Error Reference Guide](https://manishbabel.github.io/a2a-protocol-docs/troubleshooting/): This page serves as a comprehensive reference for resolving common errors encountered while using the A2A Protocol platform. It includes a list of error codes and links to detailed guides for troubleshooting specific issues. Users can find solutions for errors related to agent communication, task delegation, network connectivity, and more. - [Handling Communication Limits in A2A](https://manishbabel.github.io/a2a-protocol-docs/troubleshooting/): This page provides guidance on managing communication limits in A2A Protocol's agent networks. It explains how to identify potential infinite loops in your agent communication and offers solutions for increasing the communication limit when working with complex agent networks. Additionally, it includes code examples to illustrate the concepts discussed. - [Handling INVALID_AGENT_COMMUNICATION in A2A](https://manishbabel.github.io/a2a-protocol-docs/troubleshooting/): This page explains the INVALID_AGENT_COMMUNICATION error that occurs in A2A Protocol when multiple agents attempt to communicate with the same target concurrently. It provides an example of how this error can arise and offers a solution by using proper communication protocols to coordinate agent interactions. Additionally, troubleshooting tips are included to help resolve this issue. - [Handling Invalid Agent Return Values in A2A](https://manishbabel.github.io/a2a-protocol-docs/troubleshooting/): This page provides guidance on the error encountered when an A2A agent returns a non-standard value. It includes an example of incorrect agent implementation and the resulting error message. Additionally, troubleshooting tips are offered to ensure that all agents return the expected response format. - [Handling Multiple Agent Networks in A2A](https://manishbabel.github.io/a2a-protocol-docs/troubleshooting/): This page discusses the limitations of calling multiple agent networks within a single A2A Protocol node when checkpointing is enabled. It provides troubleshooting tips to resolve related errors, including suggestions for compiling networks without checkpointing and using the Send API for agent calls. - [Handling INVALID_TASK_HISTORY Error in A2A](https://manishbabel.github.io/a2a-protocol-docs/troubleshooting/): This page provides an overview of the INVALID_TASK_HISTORY error encountered in A2A Protocol when a malformed list of tasks is passed. It outlines the potential causes of the error and offers troubleshooting steps to resolve it. Users can learn how to properly invoke agents and manage task calls to avoid this issue. - [Handling INVALID_LICENSE Error in A2A Platform](https://manishbabel.github.io/a2a-protocol-docs/troubleshooting/): This page provides guidance on troubleshooting the INVALID_LICENSE error encountered when starting a self-hosted A2A Protocol Platform server. It outlines the scenarios in which this error may occur and offers solutions based on different deployment types. Additionally, it includes steps to verify the necessary credentials for successful deployment. - [A2A Studio Troubleshooting Guide](https://manishbabel.github.io/a2a-protocol-docs/troubleshooting/): This page provides troubleshooting solutions for common connection issues encountered in A2A Studio, particularly with Safari and Brave browsers. It also addresses potential agent network issues and offers methods to define routing paths for conditional agent communication. Users can find step-by-step instructions for resolving these issues using Cloudflare Tunnel and browser settings. - [A2A Protocol Case Studies](https://manishbabel.github.io/a2a-protocol-docs/community/): This page provides a comprehensive list of companies that have successfully implemented A2A Protocol, showcasing their unique use cases and the benefits they have achieved. Each entry includes links to detailed case studies or blog posts for further reading. If your company uses A2A Protocol, you are encouraged to share your success story to contribute to this growing collection.
